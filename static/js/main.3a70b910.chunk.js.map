{"version":3,"sources":["styles.ts","constants.ts","Canvas.jsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MainContainer","styled","div","PosterMakerContainer","CanvasContainer","Canvas","canvasRef","useRef","contextRef","useState","isDrawing","setIsDrawing","useEffect","canvas","current","width","CANVAS_WIDTH","height","CANVAS_HEIGHT","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","ref","onMouseDown","nativeEvent","offsetX","offsetY","beginPath","moveTo","onMouseUp","closePath","onMouseMove","lineTo","stroke","onClick","clearRect","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAGaA,EAAgBC,IAAOC,IAAV,2EAAGD,CAAH,0EAObE,EAAuBF,IAAOC,IAAV,kFAAGD,CAAH,yFAQpBG,EAAkBH,IAAOC,IAAV,6EAAGD,CAAH,8HClBA,IACC,K,OCgEdI,EA5DA,WACb,IAAMC,EAAYC,iBAAO,MACnBC,EAAaD,iBAAO,MAC1B,EAAkCE,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACR,IAAMC,EAASP,EAAUQ,QACzBD,EAAOE,MAAQC,IACfH,EAAOI,OAASC,IAChBL,EAAOM,MAAMJ,MAAb,UDdwB,ICcxB,MACAF,EAAOM,MAAMF,OAAb,UDdyB,ICczB,MAEA,IAAMG,EAAUP,EAAOQ,WAAW,MAClCD,EAAQE,MAAM,EAAG,GACjBF,EAAQG,QAAU,QAClBH,EAAQI,YAAc,MACtBJ,EAAQK,UAAY,EACpBjB,EAAWM,QAAUM,IACpB,IA6BH,OACE,eAAChB,EAAD,WACE,wBACEsB,IAAKpB,EACLqB,YA/Be,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACdC,EAAqBD,EAArBC,QAASC,EAAYF,EAAZE,QACjBtB,EAAWM,QAAQiB,YACnBvB,EAAWM,QAAQkB,OAAOH,EAASC,GACnCnB,GAAa,IA4BTsB,UAhBgB,WACpBzB,EAAWM,QAAQoB,YACnBvB,GAAa,IAeTwB,YA1BO,SAAC,GAAqB,IAAnBP,EAAkB,EAAlBA,YACd,GAAKlB,EAAL,CAGA,IAAQmB,EAAqBD,EAArBC,QAASC,EAAYF,EAAZE,QACjBtB,EAAWM,QAAQsB,OAAOP,EAASC,GACnCtB,EAAWM,QAAQuB,aAsBjB,wBAAQC,QAdQ,WAClB,IAAMzB,EAASP,EAAUQ,QACTD,EAAOQ,WAAW,MAC1BkB,UAAU,EAAG,EAAG1B,EAAOE,MAAOF,EAAOI,SAW3C,uBC7CSuB,EAXC,WACd,OACE,cAACxC,EAAD,UACE,eAACG,EAAD,WACE,+CACA,cAAC,EAAD,UCKOsC,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3a70b910.chunk.js","sourcesContent":["import styled from 'styled-components/macro';\nimport { CANVAS_HEIGHT, CANVAS_WIDTH } from './constants';\n\nexport const MainContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const PosterMakerContainer = styled.div`\n  max-width: 1000px;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const CanvasContainer = styled.div`\n  width: ${CANVAS_WIDTH};\n  height: ${CANVAS_HEIGHT};\n  box-shadow: inset -1px -1px #0a0a0a, inset 1px 1px grey,\n    inset -2px -2px #dfdfdf, inset 2px 2px #0a0a0a;\n`;\n","export const CANVAS_WIDTH = 400;\nexport const CANVAS_HEIGHT = 400;\n","/* eslint-disable functional/immutable-data */\nimport { useRef, useEffect, useState } from 'react';\nimport { CANVAS_HEIGHT, CANVAS_WIDTH } from './constants';\nimport { CanvasContainer } from './styles';\n\nconst Canvas = () => {\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = CANVAS_WIDTH * 2;\n    canvas.height = CANVAS_HEIGHT * 2;\n    canvas.style.width = `${CANVAS_WIDTH}px`;\n    canvas.style.height = `${CANVAS_HEIGHT}px`;\n\n    const context = canvas.getContext('2d');\n    context.scale(2, 2);\n    context.lineCap = 'round';\n    context.strokeStyle = 'red';\n    context.lineWidth = 6;\n    contextRef.current = context;\n  }, []);\n\n  const startDrawing = ({ nativeEvent }) => {\n    const { offsetX, offsetY } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  const draw = ({ nativeEvent }) => {\n    if (!isDrawing) {\n      return;\n    }\n    const { offsetX, offsetY } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  };\n\n  const finishDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n  };\n\n  return (\n    <CanvasContainer>\n      <canvas\n        ref={canvasRef}\n        onMouseDown={startDrawing}\n        onMouseUp={finishDrawing}\n        onMouseMove={draw}\n      />\n      <button onClick={clearCanvas}>Clear</button>\n    </CanvasContainer>\n  );\n};\n\nexport default Canvas;\n","import { FC } from 'react';\nimport Canvas from './Canvas';\nimport { MainContainer, PosterMakerContainer } from './styles';\n\nconst App: FC = () => {\n  return (\n    <MainContainer>\n      <PosterMakerContainer>\n        <h1>Poster maker!</h1>\n        <Canvas />\n      </PosterMakerContainer>\n    </MainContainer>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}